#!/usr/bin/env node
import assert from 'assert';
import { Octokit } from '@octokit/rest';

import repository from '../lib/repository';

// eslint-disable-next-line import/no-dynamic-require
const pkg = require(`${process.cwd()}/package.json`);

const github = new Octokit();
assert(process.env.GITHUB_OAUTH_TOKEN, 'GITHUB_OAUTH_TOKEN env variable should contain your personal access token');
github.auth({ token: process.env.GITHUB_OAUTH_TOKEN, type: 'oauth' });

const { user: owner, repo } = repository(pkg);

async function main() {
  const latestRelease = await github.repos.getLatestRelease({ owner, repo });
  if (latestRelease.status > 200) {
    throw new Error(`status: ${latestRelease.status}, error details: ${latestRelease.data}`);
  }

  const { name: latestReleaseName, published_at: publishedAt } = latestRelease.data;
  // eslint-disable-next-line no-console
  console.log(`Latest release: ${latestReleaseName}`);

  const prs = await github.pulls.list({ direction: 'desc', owner, repo, sort: 'updated', state: 'closed' });
  // eslint-disable-next-line lodash/prefer-lodash-method
  const body = prs.data
    .filter((item) => item.merged_at > publishedAt)
    .sort((foo, bar) => bar.title.localeCompare(foo.title))
    .map((item) => `- ${item.title} #${item.number} (by @${item.user.login})`)
    .join('\n');
  const name = `v${pkg.version}`;

  // eslint-disable-next-line no-console
  console.log(`Publishing release: ${name}`);
  // eslint-disable-next-line no-console
  console.log(body);

  await github.repos.createRelease({
    body,
    draft: false,
    name,
    owner,
    prerelease: false,
    repo,
    tag_name: name,
    target_commitish: 'master',
  });
}

main();
