#!/usr/bin/env node

const assert = require('assert');
const GitHub = require('github');
const repository = require('../lib/repository');
const pkg = require(`${process.cwd()}/package.json`);

const checkErr = (err) => {
  if (err) {
    console.error(err.toJSON());
    process.exit(1);
  }
};

const github = new GitHub();
assert(process.env.GITHUB_OAUTH_TOKEN, 'GITHUB_OAUTH_TOKEN env variable should contain your personal access token');
github.authenticate({ type: 'oauth', token: process.env.GITHUB_OAUTH_TOKEN });

const { user: owner, repo } = repository(pkg);

github.repos.getLatestRelease({ owner, repo }, (err, { data: latestRelease }) => {
  if (err) {
    if (err.code === 404) {
      latestRelease = { name: 'unknown', created_at: new Date('1970-01-01') };
    } else {
      checkErr(err);
    }
  }

  console.log('Latest release: %s', latestRelease.name);

  github.pullRequests.getAll({ owner, repo, state: 'closed', sort: 'updated', direction: 'desc' }, (err, { data: prs }) => {
    checkErr(err);

    const name = `v${pkg.version}`;
    const body = prs
      .filter(item => item.merged_at > latestRelease.published_at)
      .sort((a, b) => b.title.localeCompare(a.title))
      .map(item => `- ${item.title} #${item.number} (by @${item.user.login})`)
      .join('\n');

    console.log('Publishing release: %s', name);
    console.log(body);

    github.repos.createRelease({
      owner,
      repo,
      tag_name: name,
      target_commitish: 'master',
      name,
      body,
      draft: false,
      prerelease: false,
    }, (err) => {
      checkErr(err);
      process.exit(0);
    });
  });
});

