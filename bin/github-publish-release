#!/usr/bin/env node

const url = require('url');
const assert = require('assert');
const GitHub = require('github');
const cmd = require('../lib/cmd');
const commitAnalyzer = require('../lib/commit-analyzer');
const package = require('../../../package.json');
const repository = require('../lib/repository');

const checkErr = (err) => {
  if (err) {
    console.error(err.toJSON());
    process.exit(1);
  }
};

function publishRelease() {
  const github = new GitHub();
  assert(process.env.GITHUB_OAUTH_TOKEN, 'GITHUB_OAUTH_TOKEN env variable should contain your personal access token');
  github.authenticate({ type: 'oauth', token: process.env.GITHUB_OAUTH_TOKEN });

  const { user, repo } = repository(package);

  github.repos.getLatestRelease({ user, repo }, (err, latestRelease) => {

    if (err) {
      if (err.code === 404) {
        latestRelease = { name: 'unknown', created_at: new Date('1970-01-01') };
      } else {
        checkErr(err);
      }
    }

    console.log('Latest release: %s', latestRelease.name);

    github.pullRequests.getAll({ user, repo, state: 'closed', sort: 'updated', direction: 'desc' }, (err, prs) => {
      checkErr(err);

      const name = `v${package.version}`;
      const body = prs
        .filter((item) => item.merged_at > latestRelease.published_at)
        .sort((a, b) => b.title.localeCompare(a.title))
        .map((item) => `- ${item.title} #${item.number} (by @${item.user.login})`)
        .join('\n');

      console.log('Publishing release: %s', name);
      console.log(body);

      github.repos.createRelease({
        user,
        repo,
        tag_name: name,
        target_commitish: 'master',
        name,
        body,
        draft: false,
        prerelease: false,
      }, (err) => {
        checkErr(err);
        process.exit(0);
      });
    });
  });
}

commitAnalyzer((err, versionType) => {
  if (err) {
    // No need to reteurn process.exit(1) since it's normal to have no changes
    console.log('Commit analyzer error: ', err);
    return;
  }
  console.log(`Making ${versionType} version`);
  cmd(`npm version ${versionType}`, () => { publishRelease(); });
});

